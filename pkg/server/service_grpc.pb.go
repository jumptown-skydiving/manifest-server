// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManifestServiceClient is the client API for ManifestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManifestServiceClient interface {
	StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManifestService_StreamUpdatesClient, error)
}

type manifestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManifestServiceClient(cc grpc.ClientConnInterface) ManifestServiceClient {
	return &manifestServiceClient{cc}
}

func (c *manifestServiceClient) StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManifestService_StreamUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManifestService_ServiceDesc.Streams[0], "/manifest.ManifestService/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &manifestServiceStreamUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManifestService_StreamUpdatesClient interface {
	Recv() (*ManifestUpdate, error)
	grpc.ClientStream
}

type manifestServiceStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *manifestServiceStreamUpdatesClient) Recv() (*ManifestUpdate, error) {
	m := new(ManifestUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManifestServiceServer is the server API for ManifestService service.
// All implementations must embed UnimplementedManifestServiceServer
// for forward compatibility
type ManifestServiceServer interface {
	StreamUpdates(*emptypb.Empty, ManifestService_StreamUpdatesServer) error
	mustEmbedUnimplementedManifestServiceServer()
}

// UnimplementedManifestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManifestServiceServer struct {
}

func (UnimplementedManifestServiceServer) StreamUpdates(*emptypb.Empty, ManifestService_StreamUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedManifestServiceServer) mustEmbedUnimplementedManifestServiceServer() {}

// UnsafeManifestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManifestServiceServer will
// result in compilation errors.
type UnsafeManifestServiceServer interface {
	mustEmbedUnimplementedManifestServiceServer()
}

func RegisterManifestServiceServer(s grpc.ServiceRegistrar, srv ManifestServiceServer) {
	s.RegisterService(&ManifestService_ServiceDesc, srv)
}

func _ManifestService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManifestServiceServer).StreamUpdates(m, &manifestServiceStreamUpdatesServer{stream})
}

type ManifestService_StreamUpdatesServer interface {
	Send(*ManifestUpdate) error
	grpc.ServerStream
}

type manifestServiceStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *manifestServiceStreamUpdatesServer) Send(m *ManifestUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// ManifestService_ServiceDesc is the grpc.ServiceDesc for ManifestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManifestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manifest.ManifestService",
	HandlerType: (*ManifestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _ManifestService_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/server/service.proto",
}
