// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManifestServiceClient is the client API for ManifestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManifestServiceClient interface {
	StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManifestService_StreamUpdatesClient, error)
	SignInWithApple(ctx context.Context, in *SignInWithAppleRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	VerifySessionID(ctx context.Context, in *VerifySessionRequest, opts ...grpc.CallOption) (*SignInResponse, error)
}

type manifestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManifestServiceClient(cc grpc.ClientConnInterface) ManifestServiceClient {
	return &manifestServiceClient{cc}
}

func (c *manifestServiceClient) StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManifestService_StreamUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManifestService_ServiceDesc.Streams[0], "/manifest.ManifestService/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &manifestServiceStreamUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManifestService_StreamUpdatesClient interface {
	Recv() (*ManifestUpdate, error)
	grpc.ClientStream
}

type manifestServiceStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *manifestServiceStreamUpdatesClient) Recv() (*ManifestUpdate, error) {
	m := new(ManifestUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manifestServiceClient) SignInWithApple(ctx context.Context, in *SignInWithAppleRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/manifest.ManifestService/SignInWithApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestServiceClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, "/manifest.ManifestService/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestServiceClient) VerifySessionID(ctx context.Context, in *VerifySessionRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/manifest.ManifestService/VerifySessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManifestServiceServer is the server API for ManifestService service.
// All implementations must embed UnimplementedManifestServiceServer
// for forward compatibility
type ManifestServiceServer interface {
	StreamUpdates(*emptypb.Empty, ManifestService_StreamUpdatesServer) error
	SignInWithApple(context.Context, *SignInWithAppleRequest) (*SignInResponse, error)
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	VerifySessionID(context.Context, *VerifySessionRequest) (*SignInResponse, error)
	mustEmbedUnimplementedManifestServiceServer()
}

// UnimplementedManifestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManifestServiceServer struct {
}

func (UnimplementedManifestServiceServer) StreamUpdates(*emptypb.Empty, ManifestService_StreamUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedManifestServiceServer) SignInWithApple(context.Context, *SignInWithAppleRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInWithApple not implemented")
}
func (UnimplementedManifestServiceServer) SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (UnimplementedManifestServiceServer) VerifySessionID(context.Context, *VerifySessionRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySessionID not implemented")
}
func (UnimplementedManifestServiceServer) mustEmbedUnimplementedManifestServiceServer() {}

// UnsafeManifestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManifestServiceServer will
// result in compilation errors.
type UnsafeManifestServiceServer interface {
	mustEmbedUnimplementedManifestServiceServer()
}

func RegisterManifestServiceServer(s grpc.ServiceRegistrar, srv ManifestServiceServer) {
	s.RegisterService(&ManifestService_ServiceDesc, srv)
}

func _ManifestService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManifestServiceServer).StreamUpdates(m, &manifestServiceStreamUpdatesServer{stream})
}

type ManifestService_StreamUpdatesServer interface {
	Send(*ManifestUpdate) error
	grpc.ServerStream
}

type manifestServiceStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *manifestServiceStreamUpdatesServer) Send(m *ManifestUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ManifestService_SignInWithApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInWithAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestServiceServer).SignInWithApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manifest.ManifestService/SignInWithApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestServiceServer).SignInWithApple(ctx, req.(*SignInWithAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManifestService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manifest.ManifestService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestServiceServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManifestService_VerifySessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestServiceServer).VerifySessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manifest.ManifestService/VerifySessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestServiceServer).VerifySessionID(ctx, req.(*VerifySessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManifestService_ServiceDesc is the grpc.ServiceDesc for ManifestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManifestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manifest.ManifestService",
	HandlerType: (*ManifestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignInWithApple",
			Handler:    _ManifestService_SignInWithApple_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _ManifestService_SignOut_Handler,
		},
		{
			MethodName: "VerifySessionID",
			Handler:    _ManifestService_VerifySessionID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _ManifestService_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/server/service.proto",
}
